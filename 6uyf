xfreerdp /u:student /v:10.50.34.234 -dynamic-resolution +glyph-cache +clipboard

get-process | group-object {$_.Name.Substring(0,1).ToUpper()} | foreach-object {($_.name + " ") * 7; "================"; $_.group}
get-process | sort-object starttime | select-object -last 10 | ft processname,starttime 

---

$text = 'Here is the model number: MO5364'
$pattern = 'MO(\d{3})'
$text -match $pattern

$Matches[0]

---

$procs = "notepad", "msedge", "mspaint
$procs | ForEach-Object {
Start-Process $_
}

foreach ($proc in $procs){
Get-Process | Where-Object {$_.Name -like $procs}
}

$procs | ForEach-Object { Stop-Process -name $_ }




---

format-table

---

<# 1 #>
function q1($var1,$var2,$var3,$var4) {
    <# Return the product of the arguments #>
    return $var1 * $var2 * $var3 * $Var4
}
function q2($arr,$rows,$cols,$key) {
    <# Search the 2 dimensional array for the first occurance of key at column index 0
       and return the value at column index 9 of the same row.
       Return -1 if the key is not found.
    #>
    $i = 0
    while ($i -lt $rows) {
        $findme = $arr[$i][0]
        if ($findme -eq $key) {
            return $arr[$i][9]
        }
        $i += 1    
    } return -1
}
function q3 {
    <# In a loop, prompt the user to enter positive integers one at time.
       Stop when the user enters a -1. Return the maximum positive
       value that was entered."
	#>
    $int = read-host -prompt "Enter num"
    $newint = 0
    while ($newint -gt -1) {
        $newint = read-host -prompt "Enter num"
        if ($newint -gt $int) {
            $int = $newint
        }
    }
    return $int
}
function q4($filename,$whichline) {
    <# Return the line of text from the file given by the `$filename
	   argument that corresponds to the line number given by `$whichline.
	   The first line in the file corresponds to line number 0."
	#>
    Get-Content $filename | Select-Object -Index $whichline
}
function q5($path) {
    <# Return the child items from the given path sorted
       ascending by their Name
	#>
    Get-ChildItem $path | sort -Property name
}
function q6 {
    <# Return the sum of all elements provided on the pipeline
	#>
    Begin {$sum = 0}
    Process {
        foreach ($i in $_) {
            $sum += $i
        }
    }
    end {return $sum}
}
function q7 {
	<# Return only those commands whose noun is process #>
    Get-Command -Noun Process
}
function q8($adjective) {
    <# Return the string 'PowerShell is ' followed by the adjective given
	   by the `$adjective argument
	#>
    return "Powershell is $adjective"
}
function q9($ip) {
	<# Return `$true when the given argument is a valid IPv4 address,
	   otherwise return `$false. For the purpose of this function, regard
	   addresses where all octets are in the range 0-255 inclusive to
	   be valid.
	#>
    return ($ip -match "^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$" -and [bool]($ip -as [ipaddress]))
}
function q10 ($filepath,$lasthash) {
    <# Return `$true if the contents of the file given in the
       `$filepath argument have changed since `$lasthash was
       computed. `$lasthash is the previously computed SHA256
       hash (as a string) of the contents of the file. #>
        $currenthash = @(Get-FileHash $filepath | Select-Object -ExpandProperty Hash)
        if ([string]$currenthash -eq $lasthash) {
            return $False
        } else {
            return $True
        }
}
